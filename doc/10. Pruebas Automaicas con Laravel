10. Pruebas Automaicas con Laravel

Revisando la estructura en la carpeta 

/test

Existen dos tipos de test 

	/Feature

	/Unit


El primero son test de caracteristicas donde se testean diferentes componentes que interactuan entre ellos y en la segunda se testean piezas especificas de codigo, como una clase, una funcion etc.

De momento solo se probara con la primera pcion

Podremos eleimiar por tanto El ejemplo de las pruebas unitarias


Ahora podremos ejecutar en terminal:

php artisan test


Existe un error en este test:

  • Tests\Feature\ExampleTest > the application returns a successful response
  Expected response status code [200] but received 404.
  Failed asserting that 200 is identical to 404.

  at tests/Feature/ExampleTest.php:19
     15▕     public function test_the_application_returns_a_successful_response()
     16▕     {
     17▕         $response = $this->get('/');
     18▕ 
  ➜  19▕         $response->assertStatus(200);
     20▕     }
     21▕ }
     22▕ 


  Tests:  1 failed
  Time:   0.13s




Esto es por que se ha quitado la ruta de inicio 

Otra forma de ejecutar los test es de la siguiete manera:

 Eliminamos el contenido del metodo:

 class ExampleTest extends TestCase
{
    
}


Y ahora serenomba como: BooksApiTest.php

Actualizando el nombre del metodo


class BooksApiTest extends TestCase
{
    
}


Ahor alo primero que hay que testear es que se pueden ller todos los libros

class BooksApiTest extends TestCase
{
    function can_get_all_books()
    {
        
    }
}



Para poder probar que se recibieron los libros, es necesario tener libros en la BD


<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class BooksApiTest extends TestCase
{
    use RefreshDatabase;

    function can_get_all_books()
    {

    }
}




Es importante configurar la BD para los test

Ahora se tiene datos cuando se hagan las pruebas en local desde el navegador pero es necesario otra bd para cuando ejecutamos los test y no queremos que se eliminen los datos que estan probandose desde el navegador, por lo que se configura un aBD para los test


Para ello en el archivo

phpunit.xml


En donde por defecto se tiene SQL y en memoria, vamos a cambiar el nombre de la bd, vamos a utilizar la bd con el nombre:
<env name="DB_DATABASE" value="books_test"/>

Esta base de datso no existe por lo que hay que crearla

Ahora para crear un libro de prueba, al ejecutar el comando 

phpmake module con todas las opcoines que le agregamos al principio se nos agrego tambien el factory

BookFactory.php

Esta clase nos va a crear registros de prueba, por  lo que se debe definir que campos queremos que se llene,
en el caso de title y que los llene a traves del faker con una oracion aleatoria como titulo del libro.


En: 

/database/factories/BookFactory.php



 public function definition()
    {
        return [
            'title' => $this->faker->sentence();
        ];
    }